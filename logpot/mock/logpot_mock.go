// Code generated by MockGen. DO NOT EDIT.
// Source: ./logpot/interface.go

// Package mock_logpot is a generated GoMock package.
package mock_logpot

import (
	logpot "github.com/GettEngineering/logging-go/logpot"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// WithField mocks base method
func (m *MockLogger) WithField(key string, value interface{}) logpot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(logpot.Logger)
	return ret0
}

// WithField indicates an expected call of WithField
func (mr *MockLoggerMockRecorder) WithField(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*MockLogger)(nil).WithField), key, value)
}

// WithFields mocks base method
func (m *MockLogger) WithFields(fields logpot.Fields) logpot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(logpot.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields
func (mr *MockLoggerMockRecorder) WithFields(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), fields)
}

// WithError mocks base method
func (m *MockLogger) WithError(err error) logpot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", err)
	ret0, _ := ret[0].(logpot.Logger)
	return ret0
}

// WithError indicates an expected call of WithError
func (mr *MockLoggerMockRecorder) WithError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockLogger)(nil).WithError), err)
}

// Debug mocks base method
func (m *MockLogger) Debug(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg)
}

// Debug indicates an expected call of Debug
func (mr *MockLoggerMockRecorder) Debug(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), msg)
}

// Info mocks base method
func (m *MockLogger) Info(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg)
}

// Info indicates an expected call of Info
func (mr *MockLoggerMockRecorder) Info(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), msg)
}

// Warn mocks base method
func (m *MockLogger) Warn(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", msg)
}

// Warn indicates an expected call of Warn
func (mr *MockLoggerMockRecorder) Warn(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), msg)
}

// Error mocks base method
func (m *MockLogger) Error(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), msg)
}

// GetFields mocks base method
func (m *MockLogger) GetFields() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFields")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetFields indicates an expected call of GetFields
func (mr *MockLoggerMockRecorder) GetFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFields", reflect.TypeOf((*MockLogger)(nil).GetFields))
}

// MockErrorWithFields is a mock of ErrorWithFields interface
type MockErrorWithFields struct {
	ctrl     *gomock.Controller
	recorder *MockErrorWithFieldsMockRecorder
}

// MockErrorWithFieldsMockRecorder is the mock recorder for MockErrorWithFields
type MockErrorWithFieldsMockRecorder struct {
	mock *MockErrorWithFields
}

// NewMockErrorWithFields creates a new mock instance
func NewMockErrorWithFields(ctrl *gomock.Controller) *MockErrorWithFields {
	mock := &MockErrorWithFields{ctrl: ctrl}
	mock.recorder = &MockErrorWithFieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorWithFields) EXPECT() *MockErrorWithFieldsMockRecorder {
	return m.recorder
}

// GetError mocks base method
func (m *MockErrorWithFields) GetError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetError indicates an expected call of GetError
func (mr *MockErrorWithFieldsMockRecorder) GetError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockErrorWithFields)(nil).GetError))
}

// GetFields mocks base method
func (m *MockErrorWithFields) GetFields() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFields")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetFields indicates an expected call of GetFields
func (mr *MockErrorWithFieldsMockRecorder) GetFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFields", reflect.TypeOf((*MockErrorWithFields)(nil).GetFields))
}
